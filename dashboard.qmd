---
title: "Weekend's Hits"
format: 
  dashboard:
    logo: "images/logo.png"
    orientation: columns
editor_options: 
  chunk_output_type: console
---


## column {width="35%"}

```{r, libraries}

#| context: setup
#| echo: false
#| message: false
#| inlcude: false

library(dplyr)
library(ggplot2)
library(gt)
library(DBI)
library(RSQLite)

```

```{r}

#| echo: false
#| include: false
#| message: false 

# Dallas Debrem Mihere St Micheal and Debre Berhan Holy Trinity EOTC
mydb <- dbConnect(RSQLite::SQLite(), "/Users/yanzel/Documents/my-python-project/YTube-Shiny/youtube_data.db")
videos <- dbGetQuery(mydb, 'SELECT * FROM videos;')
comments <- dbGetQuery(mydb, 'SELECT * FROM comments;')

```

```{r}
videos <-  videos |> 
  mutate(Church = case_when(
    channel == 1 ~ "Dallas D/Mihere St Micheal",
    channel == 2 ~ "Dallas D/Berhan Holy Trinity"
  ))
```

```{r, createtable}

#| expandable: false

generate_svg_circle <- function(views) {
  total_views <- as.numeric(views)/10000
  
  # Calculate the radius of the circle
  radius <- 10 + 15 * (views / 10000)  
  
  # Interpolate the color from red (popularity = 0) to green (popularity = 100)
  circle_colour_picker <- colorRampPalette(c("#B91d1d", "#ED8E11", "#EDDE11", "#1DB954"))
  
  # There are 101 colour values since popularity ranges from 0 to 100
  color <- circle_colour_picker(101)[total_views + 1]
  
  # Generate the SVG code for the circle
  svg_code <- sprintf(
    '<svg height="%1$s" width="%1$s"><circle cx="%2$s" cy="%2$s" r="%2$s" stroke="none" stroke-width="0" fill="%3$s" /><text class="circle-text" x="%2$s" y="%2$s" font-size="%4$s" fill="white" text-anchor="middle" dy=".3em">%5$s</text></svg>',
    2 * radius,        # SVG width and height
    radius,            # Circle center x, y
    color,             # Fill color used also for stroke
    radius * 0.6,      # Font size based on radius
    total_views   # Text to display
  )
  return(svg_code)
}

# Create the gt table with custom formatting

videos |>
  group_by(channel) |> 
  slice_max(order_by = views, n = 25) |> 
  ungroup() |> 
  select(channel, title ,published_at , views, likes) |>
  gt(id = "custom") |>
  cols_label(
    channel = md("**Church**"),
    title = "Service Type",
    published_at = md("**Service Date**"),
    
    likes = html('<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="15" height="15" viewBox="0,0,255.998,255.998"><g fill="#ffffff" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal"><g transform="scale(10.66667,10.66667)"><path d="M12,2c-5.523,0 -10,4.477 -10,10c0,5.523 4.477,10 10,10c5.523,0 10,-4.477 10,-10c0,-5.523 -4.477,-10 -10,-10zM14.586,16l-3.293,-3.293c-0.188,-0.188 -0.293,-0.442 -0.293,-0.707v-5c0,-0.552 0.448,-1 1,-1v0c0.552,0 1,0.448 1,1v4.586l3,3c0.39,0.39 0.39,1.024 0,1.414v0c-0.39,0.39 -1.024,0.39 -1.414,0z"></path></g></g></svg>'),
    views = md("**Number of views**")
  ) |>
  # text_transform(
  #   locations = cells_body(columns = channel),
  #   fn = function(x) { web_image(url = x, height = 50) }
  # ) |>
  # text_transform(
  #   fn = function(x) {
  #     generate_svg_circle(x)
  #   },
  #   locations = cells_body(columns = views)
  # ) |> 
  fmt(
    columns = views, 
    fns = function(x) {
      num_minutes <- floor(x / 1000)
      num_seconds <- ifelse(round((x %% 60000) / 1000) == 60, 59, round((x %% 60000) / 1000))
      sprintf("%d:%02d", num_minutes, num_seconds)
    }
  ) |> 
  # cols_nanoplot(
  #   columns = tempo,
  #   plot_type = "line",
  #   new_col_name = "tempos",
  #   new_col_label = md("**Tempo**"),
  #   options = nanoplot_options(
  #     data_point_fill_color = "#1DB954",
  #     data_point_stroke_color = "#1DB954",
  #     data_area_fill_color = "#1DB954",
  #     data_line_stroke_color = "#7D3C98"
  #   )
  # ) |>
  cols_align(
    align = "center",
    columns = title
  ) |> 
#   tab_footnote(
#     footnote = "The popularity of a track is a value between 0 and 100, with 100 being the most popular. The popularity is calculated by algorithm and is based, in the most part, on the total number of plays the track has had and how recent those plays are.
# Generally speaking, songs that are being played a lot now will have a higher popularity than songs that were played a lot in the past.",
#     locations = cells_column_labels(columns = views)
#   ) 
#   tab_footnote(
#     footnote = "The tempo is measured in beats per minute and represents the speed at which the music is played. The visualization shows how the tempo varies across the different sections of the song. Sections with a higher tempo are generally more energetic and upbeat, while sections with a lower tempo may be more emotional or contemplative.",
#     locations = cells_column_labels(columns = tempos)
#   ) |> 
#   tab_source_note(
#     source_note = md("**Source:** [Today's Top Hits Playlist](https://open.spotify.com/playlist/37i9dQZF1DXcBWIGoYBM5M), from the Spotify Web API")
#   ) |> 
  tab_options(
    table.font.color = "#FFFFFF",
    table.background.color = "#191414",
    table.font.size = px(12),
    table.border.top.color = "transparent",
    table.border.bottom.color = "transparent",
    table_body.hlines.color = "transparent",
    table_body.border.bottom.color = "transparent",
    column_labels.border.bottom.color = "transparent",
    column_labels.border.top.color = "transparent",
    footnotes.background.color = "#282828",
    source_notes.background.color = "#282828"
  ) |> 
  tab_style_body(
    style = cell_borders(
      sides = c("top", "bottom"),
      weight = px(0) # Remove row borders
    ),
    fn = function(x) { is.numeric(x) | is.character(x) }
  ) |> 
  opt_css(
    css = "
    table tr:nth-child(odd) {
      background-color: #282828;
    }
      
    table tr:hover {
      background-color: #383838;
    }
    
    .cell-output-display {
      overflow-x: unset !important;
    }
    
    div#custom {
      overflow-x: unset !important;
      overflow-y: unset !important;
    }
    
    #custom .gt_col_heading {
      position: sticky !important;
      top: -5px !important;
      z-index: 10 !important;
    }
    "
  )
```

## Column {width="65%"}

### Row {height ="10%"}


### Row {height="70%"}

placehoder for column2 row2

### Row {height="20%"}

placehoder for column2 row3


